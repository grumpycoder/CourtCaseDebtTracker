(function () {
    'use strict';

    var module = angular.module('app', [
        //third party modules
        'ui.bootstrap',
        'ngSanitize',
        'ui.select',
        'angular-confirm',
        'ngToast'
    ]);

    module.run(function () {
        console.log('Application Started');
    })
})();
//case-detail.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, uibDateParser) {
        var $ctrl = this;

        $ctrl.title = 'Case Manager';
        $ctrl.subTitle = 'Case';
        $ctrl.isBusy = false;

        $ctrl.$onInit = function () {
            console.log('case detail init');
            var id = location.pathname.split('/')[location.pathname.split('/').length - 1];
            $ctrl.isBusy = true;
            $http.get('/api/case/' + id).then(function (r) {
                $ctrl.case = r.data;
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.openModal = function () {
            $modal.open({
                component: 'caseEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    case: $ctrl.case
                },
                size: 'md'
            }).result.then(function (result) {
                console.log('updated', result);
                angular.extend($ctrl.case, result);
            }, function (reason) {});
        }

        $ctrl.addLitigant = function (type) {
            if ($ctrl.plaintiff !== undefined) {
                console.log('add plaintiff', $ctrl.plaintiff.name);
                $ctrl.plaintiff.caseId = $ctrl.case.id;
                $ctrl.plaintiff.type = 'plaintiff';

                $http.post('/api/case/' + $ctrl.case.id + '/litigant', $ctrl.plaintiff)
                    .then(function (r) {
                        $ctrl.case.plaintiffs.unshift(r.data);
                        $ctrl.plaintiff = undefined;
                    });
            }
            if ($ctrl.defendant !== undefined) {
                $ctrl.defendant.caseId = $ctrl.case.id;
                $ctrl.defendant.type = 'defendant';

                console.log('add defendant', $ctrl.defendant);
                $http.post('/api/case/' + $ctrl.case.id + '/litigant', $ctrl.defendant)
                    .then(function (r) {
                        $ctrl.case.defendants.unshift(r.data);
                        $ctrl.defendant = undefined;
                    });
            }
        }

        $ctrl.deleteLitigant = function (item, type) {
            console.log('litigant', item);
            console.log('type', type);
            $http.delete('/api/case/' + $ctrl.case.id + '/litigant/' + item.id).then(function (r) {
                switch (type) {
                    case 'defendant':
                        var idx = $ctrl.case.defendants.indexOf(item);
                        $ctrl.case.defendants.splice(idx, 1);
                        break;
                    case 'plaintiff':
                        var idx = $ctrl.case.plaintiffs.indexOf(item);
                        $ctrl.case.plaintiffs.splice(idx, 1);
                        break;
                    default:
                        console.log('unknown litigant');
                }
            }).catch(function (err) {
                // toastr.error('Oops. Error deleting tax');
            }).finally(function () {
                // $ctrl.isBusy = false;
            });

        }

    }

    module.component('caseDetail', {
        templateUrl: '/app/cases/case-detail.component.html',
        controller: ['$http', '$uibModal', 'uibDateParser', controller]
    });
})();
//case-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http, uibDateParser) {
        var $ctrl = this;
        $ctrl.title = 'Update Case';
        $ctrl.dateFormat = "MM/DD/YYYY";
        $ctrl.dateOptions = {
            minDate: '1940-01-01'
        };

        $ctrl.$onInit = function () {
            console.log('case edit init');
            if ($ctrl.resolve) {
                $ctrl.case = angular.copy($ctrl.resolve.case);

                var isValidDate = moment($ctrl.resolve.case.dateFiled).isValid();
                if (moment($ctrl.resolve.case.dateFiled).isValid()) {
                    $ctrl.case.dateFiled = new Date($ctrl.case.dateFiled);
                } else {
                    $ctrl.case.dateFiled = new Date();
                }
            }
            if ($ctrl.case === undefined) {
                $ctrl.title = 'New Case';
            }

            $http.get('/api/court/list').then(function (r) {
                $ctrl.courts = r.data;
            })
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            if ($ctrl.case.id !== undefined) {
                $http.put('/api/case', $ctrl.case).then(function (r) {
                    $ctrl.modalInstance.close(r.data);
                });
            } else {
                $http.post('/api/case', $ctrl.case).then(function (r) {
                    $ctrl.modalInstance.close(r.data);
                });
            }
        }


    }

    module.component('caseEdit', {
        templateUrl: '/app/cases/case-edit.component.html',
        controller: ['$http', controller],
        bindings: {
            case: '<',
            resolve: '<',
            close: '&',
            dismiss: '&',
            modalInstance: '<'
        }
    });
})();
//case-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal) {
        var $ctrl = this;

        $ctrl.title = 'Case Manager';
        $ctrl.subTitle = 'Cases';
        $ctrl.isBusy = false;

        $ctrl.$onInit = function () {
            console.log('case list init');
            $ctrl.isBusy = true;
            $http.get('api/case/list').then(function (r) {
                $ctrl.cases = r.data;
                console.log('cases', $ctrl.cases);
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.openModal = function () {
            $modal.open({
                component: 'caseEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    case: $ctrl.case
                },
                size: 'md'
            }).result.then(function (result) {
                console.log('result', result);
                $ctrl.cases.unshift(result);
            }, function (reason) {});
        }

    }

    module.component('caseList', {
        templateUrl: 'app/cases/case-list.component.html',
        controller: ['$http', '$uibModal', controller]
    });
})();
//court-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http) {
        var $ctrl = this;

        $ctrl.title = 'Update Court';

        $ctrl.$onInit = function () {
            console.log('court edit init', $ctrl);
            $http.get('api/jurisdiction/list').then(function (r) {
                $ctrl.jurisdictions = r.data;
            });

            if ($ctrl.resolve) {
                $ctrl.court = angular.copy($ctrl.resolve.court);
            }
            if ($ctrl.court === undefined) {
                $ctrl.title = 'New Court';
            }
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            console.log('save', $ctrl.court);
            if ($ctrl.court.id !== undefined) {
                console.log('updating court', $ctrl.court);
                $http.put('api/court', $ctrl.court).then(function (r) {
                    $ctrl.modalInstance.close($ctrl.court);
                });
            } else {
                console.log('adding new court', $ctrl.court);
                $http.post('api/court', $ctrl.court).then(function (r) {
                    $ctrl.modalInstance.close(r.data);
                });
            }
        }

    }

    module.component('courtEdit', {
        templateUrl: '/app/courts/court-edit.component.html',
        controller: ['$http', controller],
        bindings: {
            court: '<',
            resolve: '<',
            close: '&',
            dismiss: '&',
            modalInstance: '<'
        }
    });
})();
//court-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, $confirm, ngToast) {
        var $ctrl = this;

        $ctrl.title = 'Court Manager';
        $ctrl.subTitle = 'Courts';
        $ctrl.isBusy = false;

        $ctrl.$onInit = function () {
            console.log('court list init');
            $ctrl.isBusy = true;
            $http.get('api/court/list').then(function (r) {
                $ctrl.courts = r.data;
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.openModal = function (court) {
            $modal.open({
                component: 'courtEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    court: court
                },
                size: 'md'
            }).result.then(function (result) {
                console.log('updated', result);
                if (court !== undefined) {
                    angular.extend(court, result);
                } else {
                    $ctrl.courts.unshift(result);
                }
            }, function (reason) {});
        }

        $ctrl.delete = function (court) {
            $confirm({
                title: 'Delete',
                text: 'Are you sure you want to delete ' + court.name + '?'
            }).then(function () {
                $http.delete('/api/court/' + court.id).then(function (r) {
                    var idx = $ctrl.courts.indexOf(court);
                    $ctrl.courts.splice(idx, 1);
                    var myToastMsg = ngToast.success({
                        content: 'Deleted court ' + court.name,
                        dismissButton: true
                    });
                }).catch(function (err) {
                    console.log('Oops. Something went wrong', err);
                    var myToastMsg = ngToast.danger({
                        content: err.data,
                        dismissButton: true
                    });
                });
            });

        }
    }

    module.component('courtList', {
        templateUrl: 'app/courts/court-list.component.html',
        controller: ['$http', '$uibModal', '$confirm', 'ngToast', controller]
    });
})();
//mark.lawrence
//date-input.directive.js

(function () {
    angular.module('app').directive('dateInput', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elm, attrs, ctrl) {
                var moment = $window.moment;
                var dateFormat = attrs.dateInput;

                attrs.$observe('dateInput', function (newValue) {
                    console.log('newValue', newValue);
                    if (dateFormat === newValue || !ctrl.$modelValue) return;

                    dateFormat = newValue;
                    ctrl.$modelValue = moment(ctrl.$setViewValue).format(dateFormat);
                    console.log('datevalue', $ctrl.modelValue);
                });

                ctrl.$formatters.unshift(function (modelValue) {
                    if (!dateFormat || !modelValue) return "";
                    var retVal = moment(modelValue).format(dateFormat);
                    return retVal;
                });

                ctrl.$parsers.unshift(function (viewValue) {
                    var date = moment(viewValue, dateFormat);
                    return (date && date.isValid() && date.year() > 1950) ? date.toDate() : "";
                });
            }
        };
    });
})();
//jurisdiction-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http) {
        var $ctrl = this;

        $ctrl.title = 'Update Jurisdiction';

        $ctrl.$onInit = function () {
            console.log('jurisdiction edit init', $ctrl);
            if ($ctrl.resolve) {
                $ctrl.jurisdiction = angular.copy($ctrl.resolve.jurisdiction);
            }
            if ($ctrl.jurisdiction === undefined) {
                $ctrl.title = 'New Jurisdiction'
            }
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            console.log('save', $ctrl.jurisdiction);
            if ($ctrl.jurisdiction.id !== undefined) {
                $http.put('api/jurisdiction', $ctrl.jurisdiction).then(function (r) {
                    $ctrl.modalInstance.close($ctrl.jurisdiction);
                });
            } else {
                $http.post('api/jurisdiction', $ctrl.jurisdiction).then(function (r) {
                    $ctrl.modalInstance.close($ctrl.jurisdiction);
                });
            }
        }


    }

    module.component('jurisdictionEdit', {
        templateUrl: 'app/jurisdictions/jurisdiction-edit.component.html',
        controller: ['$http', controller],
        bindings: {
            jurisdiction: '<',
            resolve: '<',
            close: '&',
            dismiss: '&',
            modalInstance: '<'
        }
    });
})();
//jurisdiction-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal) {
        var $ctrl = this;

        $ctrl.title = 'Jurisdiction Manager';
        $ctrl.subTitle = 'Jurisdictions';
        $ctrl.isBusy = false;

        $ctrl.$onInit = function () {
            console.log('jurisdiction list init');
            $ctrl.isBusy = true;
            $http.get('api/jurisdiction/list').then(function (r) {
                console.log('r', r);
                $ctrl.jurisdictions = r.data;
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.selectJurisidiction = function (j) {
            console.log('select', j);
            $ctrl.selectedJurisidiction = j;
        }

        $ctrl.openModal = function (jurisdiction) {
            console.log('selected', jurisdiction);
            $modal.open({
                component: 'jurisdictionEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    jurisdiction: jurisdiction
                },
                size: 'md'
            }).result.then(function (result) {
                console.log('updated', result);
                if (jurisdiction === undefined) {
                    $ctrl.jurisdictions.unshift(result);
                } else {
                    angular.extend(jurisdiction, result);
                }
            }, function (reason) {});
        }
    }

    module.component('jurisdictionList', {
        templateUrl: 'app/jurisdictions/jurisdiction-list.component.html',
        controller: ['$http', '$uibModal', controller]
    });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
