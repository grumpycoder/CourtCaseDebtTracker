(function () {
    'use strict';

    var module = angular.module('app', [
        //third party modules
        'ui.bootstrap',
        'ngSanitize',
        'ui.select',
        'angular-confirm',
        'ngToast',
        'smart-table'
    ]);

    module.run(function () {
        console.log('Application Started');
    })
})();
//case-detail.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, uibDateParser, $confirm, ngToast) {
        var $ctrl = this;

        $ctrl.title = 'Case Manager';
        $ctrl.subTitle = 'Case';
        $ctrl.isBusy = false;

        $ctrl.$onInit = function () {
            console.log('case detail init');
            var id = location.pathname.split('/')[location.pathname.split('/').length - 1];
            $ctrl.isBusy = true;
            $http.get('/api/case/' + id).then(function (r) {
                $ctrl.case = r.data;
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.openModal = function () {
            $modal.open({
                component: 'caseEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    case: $ctrl.case
                },
                size: 'md'
            }).result.then(function (result) {
                console.log('updated', result);
                angular.extend($ctrl.case, result);
            }, function (reason) {});
        }

        $ctrl.addLitigant = function (type) {
            if ($ctrl.plaintiff !== undefined) {
                console.log('add plaintiff', $ctrl.plaintiff.name);
                $ctrl.plaintiff.caseId = $ctrl.case.id;
                $ctrl.plaintiff.type = 'plaintiff';

                $http.post('/api/case/' + $ctrl.case.id + '/litigant', $ctrl.plaintiff)
                    .then(function (r) {
                        $ctrl.case.plaintiffs.unshift(r.data);
                        $ctrl.plaintiff = undefined;
                    });
            }
            if ($ctrl.defendant !== undefined) {
                $ctrl.defendant.caseId = $ctrl.case.id;
                $ctrl.defendant.type = 'defendant';

                console.log('add defendant', $ctrl.defendant);
                $http.post('/api/case/' + $ctrl.case.id + '/litigant', $ctrl.defendant)
                    .then(function (r) {
                        $ctrl.case.defendants.unshift(r.data);
                        $ctrl.defendant = undefined;
                    });
            }
        }

        $ctrl.deleteLitigant = function (item, type) {
            console.log('litigant', item);
            console.log('type', type);
            $http.delete('/api/case/' + $ctrl.case.id + '/litigant/' + item.id).then(function (r) {
                switch (type) {
                    case 'defendant':
                        var idx = $ctrl.case.defendants.indexOf(item);
                        $ctrl.case.defendants.splice(idx, 1);
                        break;
                    case 'plaintiff':
                        var idx = $ctrl.case.plaintiffs.indexOf(item);
                        $ctrl.case.plaintiffs.splice(idx, 1);
                        break;
                    default:
                        console.log('unknown litigant');
                }
            }).catch(function (err) {
                // toastr.error('Oops. Error deleting tax');
            }).finally(function () {
                // $ctrl.isBusy = false;
            });

        }

        $ctrl.delete = function () {
            $confirm({
                title: 'Delete',
                text: 'Are you sure you want to delete ' + $ctrl.case.caption + '?'
            }).then(function () {

                $http.delete('/api/case/' + $ctrl.case.id).then(function (r) {
                    var myToastMsg = ngToast.success({
                        content: 'Deleted case ' + $ctrl.case.caption,
                        dismissButton: true
                    });
                    window.location.href = '/';
                }).catch(function (err) {
                    console.log('Oops. Something went wrong', err);
                    var myToastMsg = ngToast.danger({
                        content: err.data,
                        dismissButton: true
                    });
                });
            });

        }
    }

    module.component('caseDetail', {
        templateUrl: '/app/cases/case-detail.component.html',
        controller: ['$http', '$uibModal', 'uibDateParser', '$confirm', 'ngToast', controller]
    });
})();
//case-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http, uibDateParser) {
        var $ctrl = this;
        $ctrl.title = 'Update Case';
        $ctrl.dateFormat = "MM/DD/YYYY";
        $ctrl.dateOptions = {
            minDate: '1940-01-01'
        };

        $ctrl.$onInit = function () {
            console.log('case edit init');
            if ($ctrl.resolve) {
                $ctrl.case = angular.copy($ctrl.resolve.case);
                console.log('case', $ctrl.case);

                if ($ctrl.case !== undefined) {
                    $ctrl.case.dateFiled = new Date($ctrl.case.dateFiled);
                } else {
                    $ctrl.case = {
                        dateFiled: new Date()
                    };
                }
            }
            if ($ctrl.case === undefined) {
                $ctrl.title = 'New Case';
            }

            $http.get('/api/court/list').then(function (r) {
                $ctrl.courts = r.data;
            })
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            if ($ctrl.case.id !== undefined) {
                $http.put('/api/case', $ctrl.case).then(function (r) {
                    $ctrl.modalInstance.close(r.data);
                });
            } else {
                $http.post('/api/case', $ctrl.case).then(function (r) {
                    $ctrl.modalInstance.close(r.data);
                });
            }
        }


    }

    module.component('caseEdit', {
        templateUrl: '/app/cases/case-edit.component.html',
        controller: ['$http', controller],
        bindings: {
            case: '<',
            resolve: '<',
            close: '&',
            dismiss: '&',
            modalInstance: '<'
        }
    });
})();
//case-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, ngToast) {
        var $ctrl = this;
        var pageSizeDefault = 10;

        $ctrl.title = 'Case Manager';
        $ctrl.subTitle = 'Cases';
        $ctrl.isBusy = false;

        $ctrl.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };

        $ctrl.$onInit = function () {
            console.log('case list init');
            $ctrl.isBusy = true;
        }

        $ctrl.search = function (tableState) {
            tableStateRef = tableState;
            $ctrl.isBusy = true;

            if (typeof (tableState.sort.predicate) !== "undefined") {
                $ctrl.searchModel.orderBy = tableState.sort.predicate;
                $ctrl.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }

            $http.get('api/case/list', {
                params: $ctrl.searchModel
            }).then(function (r) {
                $ctrl.cases = r.data.results;
                $ctrl.searchModel = r.data;
                delete $ctrl.searchModel.results;
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.resetSearch = function () {
            $ctrl.searchModel = {
                page: 1,
                pageSize: pageSizeDefault,
                orderBy: 'id',
                orderDirection: 'asc'
            };
            $ctrl.search(tableStateRef);
        }

        $ctrl.paged = function paged() {
            $ctrl.search(tableStateRef);
        };

        $ctrl.openModal = function () {
            $modal.open({
                component: 'caseEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    case: $ctrl.case
                },
                size: 'md'
            }).result.then(function (result) {
                console.log('result', result);
                $ctrl.cases.unshift(result);
                var myToastMsg = ngToast.success({
                    content: 'Added case ' + result.caption,
                    dismissButton: true
                });
            }, function (reason) {});
        }

    }

    module.component('caseList', {
        templateUrl: 'app/cases/case-list.component.html',
        controller: ['$http', '$uibModal', 'ngToast', controller]
    });
})();
//court-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http) {
        var $ctrl = this;

        $ctrl.title = 'Update Court';

        $ctrl.$onInit = function () {
            console.log('court edit init', $ctrl);
            $http.get('api/jurisdiction/list').then(function (r) {
                $ctrl.jurisdictions = r.data;
            });

            if ($ctrl.resolve) {
                $ctrl.court = angular.copy($ctrl.resolve.court);
            }
            if ($ctrl.court === undefined) {
                $ctrl.title = 'New Court';
            }
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            console.log('save', $ctrl.court);
            if ($ctrl.court.id !== undefined) {
                console.log('updating court', $ctrl.court);
                $http.put('api/court', $ctrl.court).then(function (r) {
                    $ctrl.modalInstance.close($ctrl.court);
                });
            } else {
                console.log('adding new court', $ctrl.court);
                $http.post('api/court', $ctrl.court).then(function (r) {
                    $ctrl.modalInstance.close(r.data);
                });
            }
        }

    }

    module.component('courtEdit', {
        templateUrl: '/app/courts/court-edit.component.html',
        controller: ['$http', controller],
        bindings: {
            court: '<',
            resolve: '<',
            close: '&',
            dismiss: '&',
            modalInstance: '<'
        }
    });
})();
//court-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, $confirm, ngToast) {
        var $ctrl = this;
        var pageSizeDefault = 10;

        $ctrl.title = 'Court Manager';
        $ctrl.subTitle = 'Courts';
        $ctrl.isBusy = false;

        $ctrl.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };

        $ctrl.$onInit = function () {
            console.log('court list init');
            $ctrl.isBusy = true;

        }

        $ctrl.search = function (tableState) {
            tableStateRef = tableState;
            $ctrl.isBusy = true;

            if (typeof (tableState.sort.predicate) !== "undefined") {
                $ctrl.searchModel.orderBy = tableState.sort.predicate;
                $ctrl.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }

            console.log('search', $ctrl.searchModel);

            $http.get('api/court/list', {
                params: $ctrl.searchModel
            }).then(function (r) {
                $ctrl.courts = r.data.results;
                $ctrl.searchModel = r.data;
                delete $ctrl.searchModel.results;
                console.log('count', $ctrl.courts);
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.paged = function paged() {
            $ctrl.search(tableStateRef);
        };

        $ctrl.openModal = function (court) {
            $modal.open({
                component: 'courtEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    court: court
                },
                size: 'md'
            }).result.then(function (result) {
                if (court !== undefined) {
                    angular.extend(court, result);
                } else {
                    $ctrl.courts.unshift(result);
                }
            }, function (reason) {});
        }

        $ctrl.delete = function (court) {
            $confirm({
                title: 'Delete',
                text: 'Are you sure you want to delete ' + court.name + '?'
            }).then(function () {
                $http.delete('/api/court/' + court.id).then(function (r) {
                    var idx = $ctrl.courts.indexOf(court);
                    $ctrl.courts.splice(idx, 1);
                    var myToastMsg = ngToast.success({
                        content: 'Deleted court ' + court.name,
                        dismissButton: true
                    });
                }).catch(function (err) {
                    console.log('Oops. Something went wrong', err);
                    var myToastMsg = ngToast.danger({
                        content: err.data,
                        dismissButton: true
                    });
                });
            });

        }
    }

    module.component('courtList', {
        templateUrl: 'app/courts/court-list.component.html',
        controller: ['$http', '$uibModal', '$confirm', 'ngToast', controller]
    });
})();
//mark.lawrence
//date-input.directive.js

(function () {
    angular.module('app').directive('dateInput', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elm, attrs, ctrl) {
                var moment = $window.moment;
                var dateFormat = attrs.dateInput;

                attrs.$observe('dateInput', function (newValue) {
                    console.log('newValue', newValue);
                    if (dateFormat === newValue || !ctrl.$modelValue) return;

                    dateFormat = newValue;
                    ctrl.$modelValue = moment(ctrl.$setViewValue).format(dateFormat);
                    console.log('datevalue', $ctrl.modelValue);
                });

                ctrl.$formatters.unshift(function (modelValue) {
                    if (!dateFormat || !modelValue) return "";
                    var retVal = moment(modelValue).format(dateFormat);
                    return retVal;
                });

                ctrl.$parsers.unshift(function (viewValue) {
                    var date = moment(viewValue, dateFormat);
                    return (date && date.isValid() && date.year() > 1950) ? date.toDate() : "";
                });
            }
        };
    });
})();
//mark.lawrence
//smart-table.directive.js

(function () {
    angular.module('app').directive("stClearKey", function () {
        return {
            restrict: 'EA',
            require: ['^stTable', '^ngModel'],
            link: function (scope, element, attrs, ctrls) {
                element.on('keydown', function (event) {
                    var ngModel = ctrls[1];
                    var ctrl = ctrls[0];

                    if (event.which === 13) {
                        return ctrl.pipe();
                    }
                    if (event.which === 27) {

                        if (element.context.attributes['st-search'] !== undefined) {
                            return scope.$apply(function () {
                                var fieldName = element.context.attributes['st-search'].value;
                                var tableState = ctrl.tableState();
                                tableState.search.predicateObject[fieldName] = '';
                                return ctrl.pipe();
                            });

                        } else {
                            return scope.$apply(function () {
                                ngModel.$setViewValue(null);
                                ngModel.$render(); // will update the input value as well
                            });

                        }
                    }
                });
            }
        };
    });

    angular.module('app')
        .directive("stResetSearch",
            function () {
                return {
                    restrict: 'EA',
                    require: ['^stTable', '^ngModel'],
                    link: function (scope, element, attrs, ctrls) {
                        return element.bind('click',
                            function () {
                                var model = ctrls[1];
                                var ctrl = ctrls[0];

                                return scope.$apply(function () {
                                    angular.forEach(model.$viewValue,
                                        function (value, key) {
                                            if (key.toLowerCase() === 'page') {
                                                model.$viewValue[key] = 1;
                                            }
                                            if (Array.isArray(value) || _.includes(key.toLowerCase(), 'page')) return;
                                            model.$viewValue[key] = null;
                                        });
                                    var tableState = ctrl.tableState();
                                    tableState.search.predicateObject = {};
                                    tableState.pagination.start = 0;
                                    return ctrl.pipe();
                                });
                            });
                    }
                };
            });

    angular.module('app').directive('stSubmitSearch', ['stConfig', '$timeout', '$parse', function (stConfig, $timeout, $parse) {
        return {
            require: '^stTable',
            link: function (scope, element, attr, ctrl) {
                return element.bind('click',
                    function () {
                        var tableCtrl = ctrl;
                        tableCtrl.pipe();
                    });

            }
        };
    }]);


    angular.module('smart-table')
        .directive('stSearch', ['stConfig', '$timeout', '$parse', function (stConfig, $timeout, $parse) {
            return {
                require: '^stTable',
                link: function (scope, element, attr, ctrl) {
                    var tableCtrl = ctrl;
                    var promise = null;
                    var throttle = attr.stDelay || stConfig.search.delay;
                    var event = attr.stInputEvent || stConfig.search.inputEvent;

                    attr.$observe('stSearch', function (newValue, oldValue) {
                        var input = element[0].value;
                        if (newValue !== oldValue && input) {
                            ctrl.tableState().search = {};
                            tableCtrl.search(input, newValue);
                        }
                    });

                    //table state -> view
                    scope.$watch(function () {
                        return ctrl.tableState().search;
                    }, function (newValue, oldValue) {
                        var predicateExpression = attr.stSearch || '$';
                        if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {
                            element[0].value = $parse(predicateExpression)(newValue.predicateObject) || '';
                        }
                    }, true);

                    // view -> table state
                    element.bind(event, function (evt) {
                        evt = evt.originalEvent || evt;
                        if (promise !== null) {
                            $timeout.cancel(promise);
                        }

                        promise = $timeout(function () {
                            tableCtrl.search(evt.target.value, attr.stSearch || '');
                            promise = null;
                        }, throttle);
                    });
                }
            };
        }]);

})();
//jurisdiction-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http) {
        var $ctrl = this;

        $ctrl.title = 'Update Jurisdiction';

        $ctrl.$onInit = function () {
            console.log('jurisdiction edit init', $ctrl);
            if ($ctrl.resolve) {
                $ctrl.jurisdiction = angular.copy($ctrl.resolve.jurisdiction);
            }
            if ($ctrl.jurisdiction === undefined) {
                $ctrl.title = 'New Jurisdiction'
            }
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            if ($ctrl.jurisdiction.id !== undefined) {
                $http.put('api/jurisdiction', $ctrl.jurisdiction).then(function (r) {
                    $ctrl.modalInstance.close($ctrl.jurisdiction);
                });
            } else {
                $http.post('api/jurisdiction', $ctrl.jurisdiction).then(function (r) {
                    $ctrl.modalInstance.close(r.data);
                });
            }
        }


    }

    module.component('jurisdictionEdit', {
        templateUrl: 'app/jurisdictions/jurisdiction-edit.component.html',
        controller: ['$http', controller],
        bindings: {
            jurisdiction: '<',
            resolve: '<',
            close: '&',
            dismiss: '&',
            modalInstance: '<'
        }
    });
})();
//jurisdiction-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, $confirm, ngToast) {
        var $ctrl = this;

        $ctrl.title = 'Jurisdiction Manager';
        $ctrl.subTitle = 'Jurisdictions';
        $ctrl.isBusy = false;

        $ctrl.$onInit = function () {
            console.log('jurisdiction list init');
            $ctrl.isBusy = true;
            $http.get('api/jurisdiction/list').then(function (r) {
                console.log('r', r);
                $ctrl.jurisdictions = r.data;
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.openModal = function (jurisdiction) {
            $modal.open({
                component: 'jurisdictionEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    jurisdiction: jurisdiction
                },
                size: 'md'
            }).result.then(function (result) {
                if (jurisdiction === undefined) {
                    $ctrl.jurisdictions.unshift(result);
                } else {
                    angular.extend(jurisdiction, result);
                }
            }, function (reason) {});
        }

        $ctrl.delete = function (jurisdiction) {
            $confirm({
                title: 'Delete',
                text: 'Are you sure you want to delete ' + jurisdiction.name + '?'
            }).then(function () {
                $http.delete('/api/jurisdiction/' + jurisdiction.id).then(function (r) {
                    var idx = $ctrl.jurisdictions.indexOf(jurisdiction);
                    $ctrl.jurisdictions.splice(idx, 1);
                    var myToastMsg = ngToast.success({
                        content: 'Deleted jurisdiction ' + jurisdiction.name,
                        dismissButton: true
                    });
                }).catch(function (err) {
                    console.log('Oops. Something went wrong', err);
                    var myToastMsg = ngToast.danger({
                        content: err.data,
                        dismissButton: true
                    });
                });
            });
        }

    }

    module.component('jurisdictionList', {
        templateUrl: 'app/jurisdictions/jurisdiction-list.component.html',
        controller: ['$http', '$uibModal', '$confirm', 'ngToast', controller]
    });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
